import { useRef, useState } from "react";
import Head from "next/head";
import "@rainbow-me/rainbowkit/styles.css";
import {
  getDefaultWallets,
  RainbowKitProvider,
  ConnectButton,
  useConnectModal,
} from "@rainbow-me/rainbowkit";
import {
  configureChains,
  createClient,
  useSignMessage,
  WagmiConfig,
} from "wagmi";
import { mainnet, polygon, optimism, arbitrum } from "wagmi/chains";
import { publicProvider } from "wagmi/providers/public";
import * as Comlink from "comlink";
import { FunctionComponent, ReactNode, useEffect } from "react";
const { chains, provider } = configureChains(
  [mainnet, polygon, optimism, arbitrum],
  [publicProvider()]
);

const { connectors } = getDefaultWallets({
  appName: "My RainbowKit App",
  chains,
});

const wagmiClient = createClient({
  autoConnect: true,
  connectors,
  provider,
});

const domain =
  process.env.NEXT_PUBLIC_SERVER_DOMAIN ||
  "https://next-iframe-poc-server.vercel.app/a";

export default function Home() {
  return (
    <WagmiConfig client={wagmiClient}>
      <RainbowKitProvider chains={chains}>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main>
          <h1>Next IFrame Poc Client</h1>
          <iframe src={domain} />
        </main>
        <WalletExample>
          <ConnectButton />
        </WalletExample>
      </RainbowKitProvider>
    </WagmiConfig>
  );
}

let init = false;
const WalletExample: FunctionComponent<{
  children: ReactNode;
}> = ({ children }) => {
  const { signMessageAsync } = useSignMessage();
  const { openConnectModal } = useConnectModal();
  useEffect(() => {
    if (init) {
      return;
    } else {
      init = true;
      Comlink.expose(
        {
          connect: () => openConnectModal && openConnectModal(),
          async sign(message: string, cb: (value: string) => void) {
            cb(await signMessageAsync({ message }));
          },
        },
        Comlink.windowEndpoint(window)
      );
    }
  }, [openConnectModal, signMessageAsync]);

  return <>{children}</>;
};
